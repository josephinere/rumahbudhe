// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

enum Role {
  user
  owner
  pegawai
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  password      String
  role          String    @default("user")
  accounts      Account[]
  sessions      Session[]

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Menu {
  id String @id @default(cuid())
  nama String
  image String
  harga Float
  keterangan String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

  model Employee {
  id String @id @default(cuid())
  name String
  email String
  phone String
  shift String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Transaksi {
  id                String   @id @default(cuid())
  totalHarga       Float
  jumlah            Float
  catatan           String   @db.VarChar(250)
  metodeBayar            String   @db.VarChar(100)
  tanggal           DateTime @default(now())
}

model Kode {
  id         String   @id @default(cuid())
  nama       String
  klaim     Float
  expired   DateTime
}

model Stok {
  id String @id @default(cuid())
  nama  String
  jumlah      String
  harga       Float
}

// schema.prisma

model Product {
  id        Int      @id @default(autoincrement())
  name      String
  price     Int      // Harga dalam satuan terkecil, misalnya Rupiah (tanpa koma)
  image     String?  // URL gambar produk
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  TransactionItem TransactionItem[]
}

model Transaction {
  id           Int             @id @default(autoincrement())
  date         DateTime        @default(now())
  totalAmount  Int             // Total harga transaksi
  notes        String?         // Catatan tambahan
  paymentMethod String         // Metode pembayaran, misalnya "QRIS" atau "Cash"

  items        TransactionItem[]
}

model TransactionItem {
  id           Int        @id @default(autoincrement())
  transaction  Transaction @relation(fields: [transactionId], references: [id])
  transactionId Int
  product      Product     @relation(fields: [productId], references: [id])
  productId    Int
  quantity     Int         // Jumlah item
  price        Int         // Harga produk saat transaksi (untuk melacak perubahan harga)
}
